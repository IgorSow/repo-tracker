[1mdiff --git a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/ModelConfiguration.java b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/ModelConfiguration.java[m
[1mindex 32765ae..9a6decb 100644[m
[1m--- a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/ModelConfiguration.java[m
[1m+++ b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/ModelConfiguration.java[m
[36m@@ -1,6 +1,7 @@[m
 package com.example.igor.sowinski.Allegro.Repo.domain.model;[m
 [m
 [m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Value;[m
 import org.springframework.context.annotation.Bean;[m
 import org.springframework.context.annotation.Configuration;[m
 [m
[36m@@ -8,9 +9,12 @@[m [mimport org.springframework.context.annotation.Configuration;[m
 public class ModelConfiguration {[m
 [m
 [m
[32m+[m[32m    @Value("${allegro.repository.address.url}")[m
[32m+[m[32m    private String serverAddress;[m
[32m+[m
     @Bean[m
     RepositoryService repositoryService (){[m
[31m-        return new RepositoryService();[m
[32m+[m[32m        return new RepositoryService(serverAddress);[m
     }[m
 [m
     @Bean[m
[1mdiff --git a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/Repository.java b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/Repository.java[m
[1mindex e2a1c69..1bcc575 100644[m
[1m--- a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/Repository.java[m
[1m+++ b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/Repository.java[m
[36m@@ -75,11 +75,11 @@[m [mclass Repository {[m
     public String toString() {[m
         return "Repository{" +[m
                 "name='" + name + '\'' +[m
[31m-                ", isPrivate=" + isPrivate +[m
[31m-                ", created_at='" + created_at + '\'' +[m
[32m+[m[32m//                ", isPrivate=" + isPrivate +[m
[32m+[m[32m//                ", created_at='" + created_at + '\'' +[m
                 ", updated_at='" + updated_at + '\'' +[m
[31m-                ", pushed_at='" + pushed_at + '\'' +[m
[31m-                ", language='" + language + '\'' +[m
[32m+[m[32m//                ", pushed_at='" + pushed_at + '\'' +[m
[32m+[m[32m//                ", language='" + language + '\'' +[m
                 + '\'' +[m
                 + '\'' +[m
                 '}';[m
[1mdiff --git a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryFacade.java b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryFacade.java[m
[1mindex 0ac3b7f..cec755a 100644[m
[1m--- a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryFacade.java[m
[1m+++ b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryFacade.java[m
[36m@@ -1,6 +1,7 @@[m
 package com.example.igor.sowinski.Allegro.Repo.domain.model;[m
 [m
 import com.example.igor.sowinski.Allegro.Repo.api.dto.RepositoryNameDto;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Value;[m
 [m
 public class RepositoryFacade {[m
 [m
[36m@@ -13,9 +14,9 @@[m [mpublic class RepositoryFacade {[m
     }[m
 [m
     public RepositoryNameDto getLatestRepo(){[m
[31m-        Repository lasterRepo = service.getLatest();[m
[31m-[m
[31m-        RepositoryNameDto result = new RepositoryNameDto(lasterRepo.getName());[m
[31m-        return result;[m
[32m+[m[32m//        Repository latestRepo = service.orderListByUpdateDate();[m
[32m+[m[32m//[m
[32m+[m[32m//        RepositoryNameDto result = new RepositoryNameDto(latestRepo.getName());[m
[32m+[m[32m        return null;[m
     }[m
 }[m
[1mdiff --git a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryService.java b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryService.java[m
[1mindex 3806669..ec2b1c5 100644[m
[1m--- a/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryService.java[m
[1m+++ b/src/main/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryService.java[m
[36m@@ -1,12 +1,11 @@[m
 package com.example.igor.sowinski.Allegro.Repo.domain.model;[m
 [m
[31m-[m
[31m-import org.springframework.beans.factory.annotation.Value;[m
 import org.springframework.core.ParameterizedTypeReference;[m
 import org.springframework.http.HttpMethod;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.web.client.RestTemplate;[m
[31m-[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m[32mimport java.util.Comparator;[m
 import java.util.List;[m
 [m
 [m
[36m@@ -14,38 +13,46 @@[m [mclass RepositoryService {[m
 [m
 [m
     private RestTemplate restTemplate;[m
[32m+[m[32m    private String serverAddress;[m
 [m
[31m-    @Value("${allegro.repository.address.url}")[m
[31m-    private String serverAdress;[m
[31m-[m
[31m-[m
[31m-    public RepositoryService() {[m
[31m-[m
[32m+[m[32m    public RepositoryService(String serverAddress) {[m
         this.restTemplate = new RestTemplate();[m
[32m+[m[32m        this.serverAddress = serverAddress;[m
     }[m
 [m
[31m-    public void setServerAdress(String serverAdress) {[m
[31m-        this.serverAdress = serverAdress;[m
[32m+[m[32m    public void setServerAddress(String serverAddress) {[m
[32m+[m[32m        this.serverAddress = serverAddress;[m
     }[m
 [m
     protected List<Repository> getRepositoryList() {[m
 [m
         ResponseEntity<List<Repository>> response = restTemplate.exchange([m
[31m-                serverAdress,[m
[32m+[m[32m                serverAddress,[m
                 HttpMethod.GET,[m
                 null,[m
                 new ParameterizedTypeReference<List<Repository>>() {[m
                 });[m
 [m
         List<Repository> repositoryList = response.getBody();[m
[31m-        System.out.println(repositoryList);[m
         return repositoryList;[m
     }[m
 [m
[31m-    public Repository getLatest() {[m
[32m+[m[32m    public List<Repository> orderListByUpdateDate(List<Repository> repositoryList) {[m
[32m+[m
[32m+[m[32m        Collections.sort(repositoryList, new RepoUpdateDateComparator());[m
 [m
[31m-        getRepositoryList();[m
[31m-        return null;[m
[32m+[m[32m        return repositoryList;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Repository getLatestRepo(List<Repository> orderedRepositoryByDate){[m
[32m+[m[32m        return orderedRepositoryByDate.get(1);[m
     }[m
 [m
 }[m
[32m+[m
[32m+[m[32mclass RepoUpdateDateComparator implements Comparator<Repository> {[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public int compare(Repository repo1, Repository repo2) {[m
[32m+[m[32m        return repo1.getUpdated_at().compareTo(repo2.getUpdated_at());[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/test/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryServiceTest.java b/src/test/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryServiceTest.java[m
[1mindex 0a32ef9..ffe2df6 100644[m
[1m--- a/src/test/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryServiceTest.java[m
[1m+++ b/src/test/java/com/example/igor/sowinski/Allegro/Repo/domain/model/RepositoryServiceTest.java[m
[36m@@ -1,19 +1,14 @@[m
 package com.example.igor.sowinski.Allegro.Repo.domain.model;[m
 [m
 import org.junit.Assert;[m
[31m-import org.junit.Before;[m
 import org.junit.Test;[m
 [m
 import java.util.List;[m
 [m
 public class RepositoryServiceTest {[m
 [m
[31m-    private RepositoryService repositoryService = new RepositoryService();[m
[32m+[m[32m    private RepositoryService repositoryService = new RepositoryService("https://api.github.com/users/allegro/repos");[m
 [m
[31m-    @Before[m
[31m-    public void setDefaultRepositoryAddress(){[m
[31m-        repositoryService.setServerAdress("https://api.github.com/users/allegro/repos");[m
[31m-    }[m
 [m
     @Test[m
     public void shouldFetchAllegroRepositories() {[m
[36m@@ -31,10 +26,25 @@[m [mpublic class RepositoryServiceTest {[m
     @Test[m
     public void shouldReturnRepositoryWhereIsTheLatestUpdateDateCommit(){[m
         //given[m
[32m+[m[32m        List<Repository> repositoryList = repositoryService.getRepositoryList();[m
[32m+[m[32m        int compareLatestObject = 1;[m
[32m+[m[32m        int compareOlderrObject = -1;[m
[32m+[m[32m        int compareTheSameObject = 0;[m
 [m
         //when[m
[32m+[m[32m        List<Repository> orderedList = repositoryService.orderListByUpdateDate(repositoryList);[m
[32m+[m
[32m+[m[32m        Repository lastRepository = orderedList.get(orderedList.size() -1);[m
[32m+[m[32m        Repository olderRepository = orderedList.get(1);[m
 [m
         //then[m
[32m+[m
[32m+[m[32m        int resultCompare = lastRepository.getUpdated_at().compareTo(olderRepository.getUpdated_at());[m
[32m+[m
[32m+[m[32m        Assert.assertEquals(compareLatestObject, resultCompare);[m
[32m+[m[32m        Assert.assertNotEquals(compareOlderrObject, resultCompare);[m
[32m+[m[32m        Assert.assertNotEquals(compareTheSameObject, resultCompare);[m
[32m+[m
     }[m
 [m
 [m
